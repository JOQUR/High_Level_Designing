/* Includes ------------------------------------------------------------------*/
#include <assert.h>
#include "ring_buffer.h"
#include <memory.h>
#include <malloc.h>
#include <string.h>


bool RingBuffer_Init(RingBuffer *ringBuffer, char *dataBuffer, size_t dataBufferSize) 
{
	assert(ringBuffer);
	assert(dataBuffer);
	assert(dataBufferSize > 0);
	
	if ((ringBuffer) && (dataBuffer) && (dataBufferSize > 0)) {
		ringBuffer->buf = dataBuffer;
		ringBuffer->count = dataBufferSize;
		ringBuffer->head = 0;
		ringBuffer->tail = 0;
        return true;
	}
	
	return false;
}

bool RingBuffer_Clear(RingBuffer *ringBuffer)
{
	assert(ringBuffer);
	
	if (ringBuffer) {
		ringBuffer->head = ringBuffer->tail;
		return true;
	}
	return false;
}

bool RingBuffer_IsEmpty(const RingBuffer *ringBuffer)
{
    assert(ringBuffer);	
	
    return (0 == (ringBuffer->head - ringBuffer->tail));
    
}

size_t RingBuffer_GetLen(const RingBuffer *ringBuffer)
{
	assert(ringBuffer);
	
	if (ringBuffer) {
		return (ringBuffer->head);
	}
	return 0;
	
}

size_t RingBuffer_GetCapacity(const RingBuffer *ringBuffer)
{
	assert(ringBuffer);
	
	if (ringBuffer) {
		return ringBuffer->count;
	}
	return 0;	
}


bool RingBuffer_PutChar(RingBuffer *ringBuffer, char c)
{
	assert(ringBuffer);
	
	if (ringBuffer) {
		ringBuffer->buf[ringBuffer->head] = c;
		ringBuffer->head++;
		if (ringBuffer->head > ringBuffer->count) {
			ringBuffer->head = ringBuffer->count;
			return false;
		}
		return true;
	}
	return false;
}

bool RingBuffer_GetChar(RingBuffer *ringBuffer, char *c)
{
	assert(ringBuffer);
	assert(c);
	
    if ((ringBuffer) && (c)) {
		*c = ringBuffer->buf[ringBuffer->count - ringBuffer->head];
		ringBuffer->head--;
        return true;
	}
	return false;
}